buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath group: 'com.linkedin.pygradle', name: 'pygradle-plugin', version: '0.4.1'
    }
}

apply plugin: 'com.linkedin.python-cli'

version=0.1

python {
  testDir = file('tests')
}
// define an explicit installation sequence for the dependencies.
project.tasks.findByName('installPythonRequirements').sorted = false

dependencies {
    python 'pypi:appdirs:1.4.0'
    python 'pypi:packaging:16.8'
    python 'pypi:pathlib:1.0.1'
    python 'pypi:connexion:1.0.129'
    python 'pypi:xmltodict:0.10.2'
    python 'pypi:rdflib:4.2.2'
    python 'pypi:rdflib-jsonld:0.4.0'
    python 'pypi:PyMySQL:0.7.9'
    python 'pypi:gunicorn:19.6.0'
    python 'pypi:pytest-html:1.12.0'
    test 'pypi:nose:1.3.7'
}

repositories {
    // using a local repository
    ivy{
      name 'pypi-local'
  		url "/home/user/pivy"
  		layout 'pattern' , {
  			artifact '[organisation]/[module]/[revision]/[artifact]-[revision](-[classifier]).[ext]'
  			ivy '[organisation]/[module]/[revision]/[module]-[revision].ivy'
  		}
  	}
    // using a web repository
    ivy{
      name 'pypi-attx'
  		url "http://attx-dev.hulib.helsinki.fi:5039/"
  		layout 'pattern' , {
  			artifact '[organisation]/[module]/[revision]/[artifact]-[revision](-[classifier]).[ext]'
  			ivy '[organisation]/[module]/[revision]/[module]-[revision].ivy'
  		}
    }
    // setting the repository for jenkins use
    ivy{
      name 'pypi-jenkins'
  		url "http://pypirepo:5039/"
  		layout 'pattern' , {
  			artifact '[organisation]/[module]/[revision]/[artifact]-[revision](-[classifier]).[ext]'
  			ivy '[organisation]/[module]/[revision]/[module]-[revision].ivy'
  		}
    }
}


// in case we want have a ./gradlw command.
task wrapper(type: Wrapper) {
   gradleVersion = '3.3'
}

// Succesfully running the tests requires a logs folder existing.
task creatLogsFolder {
  description = "Create logs folder."
  doFirst {
      mkdir('logs')
  }
}

// adding the database.conf to the distribution
task addConfigs(type: Copy) {
    description = "adding the database.conf to the distribution."
    from '.'
    into 'build/deployable'
    include 'database.conf'
}

// generate Tests report via a script.
task runTests(type:Exec) {
  description = "generate Tests report via a script."
  workingDir '.'
  // Create the output folder
  doFirst {
    mkdir('build/test-report')
  }
  commandLine './runTests.sh'
}

// the pytest taks depends on the logs folder and this specifies that.
buildPex.dependsOn creatLogsFolder
pytest.dependsOn creatLogsFolder
packageDeployable.dependsOn addConfigs
