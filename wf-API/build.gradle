buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath group: 'com.linkedin.pygradle', name: 'pygradle-plugin', version: '0.4.1'
    }
}

apply plugin: 'com.linkedin.python-web-app'

version=0.1

python {
  testDir = file('tests')
}
// define an explicit installation sequence for the dependencies.
project.tasks.findByName('installPythonRequirements').sorted = false

dependencies {
    python 'pypi:pathlib:1.0.1'
    python 'pypi:falcon:1.1.0'
    python 'pypi:xmltodict:0.10.2'
    python 'pypi:rdflib:4.2.2'
    python 'pypi:rdflib-jsonld:0.4.0'
    python 'pypi:PyMySQL:0.7.9'
    python 'pypi:gunicorn:19.6.0'
    python 'pypi:pytest-html:1.12.0'
    python 'pypi:click:6.7'
    test 'pypi:mock:2.0.0'
    test 'pypi:httpretty:0.8.14'
}

// in case we want have a ./gradlw command.
task wrapper(type: Wrapper) {
   gradleVersion = '3.3'
}

// Succesfully running the tests requires a logs folder existing.
task creatLogsFolder {
  description = "Create logs folder."
  doFirst {
      mkdir('logs')
  }
}

// adding the database.conf to the distribution
task addConfigs(type: Copy) {
    description = "adding the database.conf to the distribution."
    from '.'
    into 'build/deployable'
    include 'database.conf'
}

// generate Tests report via a script.
task runTests(type:Exec) {
  description = "generate Tests report via a script."
  workingDir '.'
  // Create the output folder
  doFirst {
    mkdir('build/test-report')
  }
  commandLine './runTests.sh'
}

// the pytest taks depends on the logs folder and this specifies that.
buildPex.dependsOn creatLogsFolder
pytest.dependsOn creatLogsFolder
packageDeployable.dependsOn addConfigs
