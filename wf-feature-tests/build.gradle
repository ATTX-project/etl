apply plugin: 'java'
apply plugin: 'com.chrisgahlert.gradle-dcompose-plugin'
apply plugin: 'com.github.johnrengelman.shadow'


if (!hasProperty('mainClass')) {
    ext.mainClass = ''
}


dependencies {

    testCompile \
        'junit:junit:4.10',
        'info.cukes:cucumber-java8:1.2.5',
        'info.cukes:cucumber-junit:1.2.5',
        'com.mashape.unirest:unirest-java:1.4.9',
        'org.skyscreamer:jsonassert:1.4.0',
        'net.javacrumbs.json-unit:json-unit:1.16.0',
        'net.javacrumbs.json-unit:json-unit-fluent:1.16.0',
        'org.apache.jena:apache-jena:3.1.1'
}

test {
    testLogging.showStandardStreams = true
    systemProperties System.getProperties()
}

dcompose {
    createComposeFile.useTags = true    
    registry ('http://attx-dev:5000') {}
    registry ('http://attx-dev.hulib.helsinki.fi:5000') {}  
     
    shared {
        image = 'attx-dev.hulib.helsinki.fi:5000/uv-attx-shared'
    }
    frontend {
        image = 'tenforce/unified-views-frontend:latest'
        volumesFrom = [shared]
        exposedPorts = ['8080']
        portBindings = ['8080:8080']            
        
    }
    mysql {
        image = 'tenforce/unified-views-mariadb:latest'
        env = ['MYSQL_ROOT_PASSWORD=iamroot!']
    }
    backend {
        image = 'tenforce/unified-views-backend:latest'
        volumesFrom =  [shared]
    }
    uvdpus {
        image = 'tenforce/unified-views-add-dpus'
        dependsOn = [mysql]
    }      
    wfapi {
        image = 'attx-dev.hulib.helsinki.fi:5000/wf-api:latest'
        exposedPorts = ['4301']
        portBindings = ['4301:4301']  
    }     
    
    test {
        ignoreExitCode = true
        baseDir = file('.')
        dockerFilename = 'Dockerfile'        
        binds = ["/var/run/docker.sock:/run/docker.sock"]
        command = ['sh', '-c', '/tmp/runTests.sh']
        dependsOn = [wfapi, frontend, backend, shared, uvdpus, mysql]
        waitForCommand = true
    }
    

}

task copyReportFiles(type: DcomposeCopyFileFromContainerTask) {
    service = dcompose.test       
    containerPath = '/tmp/build/reports'
    destinationDir = file("build/from-container/")
    cleanDestinationDir = false  
}

startTestContainer.finalizedBy('copyReportFiles')

// making sure the that fresh build of test classes is done before building the image
buildTestImage.dependsOn('shadowJar')
buildTestImage.dependsOn('testClasses')


shadowJar {
  classifier = 'tests'
  from sourceSets.test.output
  configurations = [project.configurations.testRuntime]
}